version: '3'

services:

  ceiamin_backend:
    container_name: c_rfb_ceiamin_backend
    hostname: ceiamin_backend
    #image: jesjf/jjprivate:playip_app_aiohttp
    image: rfb_ceiamin_backend
    ports:
      - "8001:80"
    restart: unless-stopped  # o serviço fica no ar, mesmo que a máquina host seja reiniciada. só para por comando explícito
    build:
        context: ./backend
        dockerfile: Dockerfile
    environment:
      ENV_FOR_DYNACONF: "testing"
      PYTHONUNBUFFERED: 1  # para os prints aparecerem logo

  ceiamin_frontend:
    container_name: c_rfb_ceiamin_frontend
    hostname: ceiamin_frontend
    #image: jesjf/jjprivate:playip_app_aiohttp
    image: rfb_ceiamin_frontend
    ports:
      - "8000:80"
    restart: unless-stopped  # o serviço fica no ar, mesmo que a máquina host seja reiniciada. só para por comando explícito
    build:
        context: ./frontend
        dockerfile: Dockerfile
    environment:
      ENV_FOR_DYNACONF: "testing"
      PYTHONUNBUFFERED: 1  # para os prints aparecerem logo

  nginx:
    restart: unless-stopped
    container_name: nginx
    hostname: nginx
    image: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./reverse_proxy.conf:/etc/nginx/conf.d/default.conf
      # o arquivo que no host é ./reverse_proxy.conf, dentro do container é /etc/nginx/conf.d/default.conf
      # Note que não é uma cópia, mas um mapenamento dinâmico
      #O nginx está dentro do container e procura por /etc/nginx/conf.d/default.conf
      - ./www:/etc/www
      #Agora o mapeamento foi de um diretório
      - ./selfsigned.key:/etc/nginx/cert/selfsigned.key # para rodar na maquina de desenvolvimento
      - ./selfsigned.crt:/etc/nginx/cert/selfsigned.crt


  mongo:
    image: mongo
    container_name: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - 27019:27017 # pode ser que a porta default do mongo esteja ocupada no host

      #quando este contaoner estiver no ar, você pode digitar
        #docker exec -it mongo bash
      #para entrar nele (como em qualuqer outro)
      #Dentro do container, vocẽ pode usar
        #mongo
      #Para chegar na shell do mongodb e dar comandos normalmente
      #Você pode ter que se autenticar no bdadmin
        #use admin
        #db.auth("root","root")

  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:latest
    ports:
      - 8002:8080
    environment:
        #DB_VENDOR: MYSQL
        #DB_ADDR: mysql
        #DB_DATABASE: keycloak
        #DB_USER: keycloak
        #DB_PASSWORD: keycloak
        #JDBC_PARAMS: "connectTimeout=600000" #&characterEncoding=UTF-8
        KEYCLOAK_USER: admin
        KEYCLOAK_PASSWORD: admin
        PROXY_ADDRESS_FORWARDING: 'true'  # não lembro para que isso, talvez possa sair
        #KEYCLOAK_IMPORT: "/tmp/ceiamin-realm.json"
    volumes:
      - ./keycloakdata:/opt/jboss/keycloak/standalone/data/
      - ./keycloak-ceiamin-realm-export.json:/tmp/ceiamin-realm.json
    restart: unless-stopped
    #depends_on:
    #  - mysql


